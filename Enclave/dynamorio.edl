/*
 * Copyright (C) 2011-2017 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
*/

/* Enclave.edl - Top EDL file. */


//  int gettimeofday(struct timeval *tv, struct timezone *tz);
//  int settimeofday(const struct timeval *tv, const struct timezone *tz);


enclave {
    from "sgx_tstdc.edl" import sgx_oc_cpuidex;

    trusted {

        /*
         * [in, out]:
         *      buffer with the same size will be allocated inside the enclave,
         *      the content pointed by 'val' will be copied either. After return,
         *      the buffer inside the enclave will by copied into outside 'val' again.
         */

        /********public void dyn_enclave_entry(int argc, [in] char *(*p_argv)[], [in] char *(*p_env)[]);********/
        /* public void sgxdbi_enclave_entry(int argc, [in] char ***p_argv, [in] char ***p_env); */
        public void sgxdbi_enclave_entry(long argc, [user_check] char** p_argv, [user_check] char** p_env);
    };

    untrusted {
        /******** These two functions are used for debuging ********/
        void ocall_print_str([in, string] const char *str);
        void ocall_print_syscallname(long sysno);

        /******** CPUID ********/
        void ocall_cpuid_ToNN([out, size=l] void *T, int l, int eax, int ecx);

        /******** RDTSC ********/
        void ocall_rdtsc_To([out, size=l] void *T, int l);


        /******** system-call parameter encoding rules ********/
        /********S:  const sting, just used for passed in parameters ***************/
        /********N:  long integer value, just used for passed in parameters ********/
        /********Pi: Pointing to a buffer, just used for passed in parameters ********/
        /********Po: Pointing to a buffer, just used for passed out parameters ********/
        /********Pio: Pointing to a buffer, just used for passed in/out parameters ********/
        /********Ti: Pointing to a data structure, just used for passed in parameters ********/
        /********To: Pointing to a data structure, just used for passed out parameters *******/
        /********Tio:Pointing to a data structure, used for passed in/out parameters *********/

        //void ocall_all_syscalls([in, string] const char *str);

        long ocall_syscall_0(long sysno);

        //int unlink(const char *pathname);
        long ocall_syscall_1_S(long sysno, [in, string] char *S);

        long ocall_syscall_1_N(long sysno, long N1);
        /********long ocall_syscall_1_not(long sysno, long unimplemented);********/
        /********long ocall_syscall_1_sysctl(long sysno, [in, out] struct __sysctl_args* args);********/

        long ocall_syscall_1_Ti(long sysno, [in, size=l] void *T, int l);

        //long uname(long sysno, struct old_utsname* uname);
        //time_t time(time_t *tloc);
        long ocall_syscall_1_To(long sysno, [out, size=l] void *T, int l);

        //long ocall_syscall_1_sysinfo(long sysno, struct sysinfo* info);
        //long ocall_syscall_1_timex(long sysno,, struct timex* time);

        /********syscalls with 2 paramters********/
        //long ocall_syscall_2_V0N(long sysno, [user_check] void *V, long N);
        //SYS_munmap(void *addr, size_t length)
        long ocall_syscall_2_NN(long sysno, long N1, long N2);


        long ocall_syscall_2_TiN(long sysno, [in, size=l] void *T, int l, long N);

        //int gettimeofday(struct timeval *tv, struct timezone *tz=NULL);
        long ocall_syscall_2_ToN(long sysno, [out, size=l] void *T, int l, long N);

        //int fstat(int fd, struct stat *buf);
        //int setrlimit(int resource, const struct rlimit *rlim);
        long ocall_syscall_2_NTi(long sysno, long N, [in, size=l] void *T, int l);

        //int getrlimit(int resource, struct rlimit *rlim);
        long ocall_syscall_2_NTo(long sysno, long N, [out, size=l] void *T, int l);

        //int mkdir(const char *pathname, mode_t mode);
        //int creat(const char *pathname, mode_t mode);
        //int chmod(const char *pathname, mode_t mode);
        long ocall_syscall_2_SN(long sysno, [in, string] const char *S, long N1);

        //int utime(const char *filename, const struct utimbuf *times);
        long ocall_syscall_2_STi(long sysno, [in, string] const char *S, [in, size=l] void *T, int l);

        //int stat(const char *pathname, struct stat *buf);
        long ocall_syscall_2_STo(long sysno, [in, string] const char *S, [out, size=l] void *T, int l);


        /****************************syscalls with 3 paramters**********************************************/
        //int mprotect(void *addr, size_t len, int prot);
        long ocall_syscall_3_NNN(long sysno, long N1, long N2, long N3);


        //int open(const char *pathname, int flags, mode_t mode);
        //int chown(const char *pathname, uid_t owner, gid_t group);
        long ocall_syscall_3_SNN(long sysno, [in, string] const char *S, long N1, long N2);


        //ssize_t read(int fd, void *buf, size_t count);
        //int getdents(unsigned int fd, struct linux_dirent *dirp, unsigned int count);
        long ocall_syscall_3_NPoN(long sysno, long N1, [out, size=N2] void *T, long N2);


        //ssize_t write(int fd, const void *buf, size_t count);
        long ocall_syscall_3_NPiN(long sysno, long N1, [in, size=N2] void *T, long N2);


        //ssize_t readv(int fd, const struct iovec *iov, int iovcnt);
        long ocall_syscall_3_NToN(long sysno, long N1, [out, size=dumb] void *T, long dumb, long N2);


        //ssize_t writev(int fd, const struct iovec *iov, int iovcnt);
        long ocall_syscall_3_NTiN(long sysno, long N1, [in, size=dumb] void *T, long dumb, long N2);


        //int setitimer(int which, const struct itimerval *new_value, struct itimerval *old_value);
        long ocall_syscall_3_NTiTo(long sysno, long N1, [in, size=dumb1] void *T1, long dumb1, [out, size=dumb2] void *T2, long dumb2);


        /********syscalls with 4 paramters********/
        //void *mremap(void *old_address, size_t old_size, size_t new_size, int flags);
        long ocall_syscall_4_NNNN(long sysno, long N1, long N2, long N3, long N4);

        // int rt_sigaction(int signum, const struct sigaction *act, struct sigaction *oact, size_t sigsetsize)
        long ocall_syscall_4_NTiToN(long sysno, long N1, [in, size=l1] void *Ti, long l1, [out, size=l2] void *To, long l2, long N2);

        /********syscalls with 5 paramters********/
        long ocall_syscall_5_NNNNN(long sysno, long N1, long N2, long N3, long N4, long N5);

        /********syscalls with 6 paramters********/
        //void *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset);
        long ocall_syscall_6_NNNNNN(long sysno, long N1, long N2, long N3, long N4, long N5, long N6);

        //int futex(int *uaddr, int futex_op, int val, const struct timespec *timeout, int *uaddr2, int val3);
        long ocall_syscall_6_PoNNTiPoN(long sysno, [out] int* V1, long N1, long N2, [in, size=l] void *T, long l, [out] int *V2, long N3);

        void sgxapp_reg_sighandler(int signum);
    };
};
