/*
 * Copyright (C) 2011-2017 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* Enclave.edl - Top EDL file. */

enclave {
    trusted {

        /*
         * [in, out]:
         *      buffer with the same size will be allocated inside the enclave,
         *      the content pointed by 'val' will be copied either. After return,
         *      the buffer inside the enclave will by copied into outside 'val' again.
         */

        //public void dynamorio_enclave_entry([in, out] int *val);
        public void dyn_enclave_entry(int argc, [in] char** argv, [in]char **env);
        //public void dyn_enclave_entry(unsigned long sp);
    };

    untrusted {
        /* These two functions are used for debuging */
        void ocall_print_str([in, string] const char *str);
        void ocall_print_syscallname(long sysno);


        /* system call */
        //void ocall_all_syscalls([in, string] const char *str);

        long ocall_syscall_0(long sysno);


        long ocall_syscall_1_str(long sysno, [in, string] char *str);
        /*long ocall_syscall_1_pint(long sysno, [in, out] long* pval);*/
        /*long ocall_syscall_1_int(long sysno, long val);*/
        /*long ocall_syscall_1_not(long sysno, long unimplemented);*/
        /*long ocall_syscall_1_sysctl(long sysno, [in, out] struct __sysctl_args* args);*/
        //long ocall_syscall_1_uname(long sysno, struct old_utsname* uname);
        //long ocall_syscall_1_sysinfo(long sysno, struct sysinfo* info);
        //long ocall_syscall_1_timex(long sysno,, struct timex* time);

        /*syscalls with 2 paramters*/
        //long ocall_syscall_2_V0N(long sysno, [user_check] void *V, long N);
        long ocall_syscall_2_NN(long sysno, long N1, long N2);
        long ocall_syscall_2_V1N(long sysno, [in, size=len] void *V, int len, long N);

        /*V0: just a void* pointer*/
        /*V1: IN void* pointer*/
        /*V2: OUT void* pointer*/
        /*V3: INOUT void* pointer*/
        /*syscalls with 3 paramters*/
        long ocall_syscall_3_NV2N(long sysno, long N1, [out, size=N2] void *V, long N2);

    };
};
